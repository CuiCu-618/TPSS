import argparse
from argparse import RawTextHelpFormatter
import os
import subprocess

BUILD_DIR_ = os.path.abspath("@CMAKE_BINARY_DIR@")  # @...@ replaced by CMake
EXEC_DIR_ = os.path.join(BUILD_DIR_, 'TPSS')


def parse_args():
    def cspair(string):
        first, second = string.split(',')
        return int(first), int(second)
    parser = argparse.ArgumentParser(
        description="""
        Test several damping factors regarding the Poisson problem on a
        distorted Cartesian mesh
        """,
        formatter_class=RawTextHelpFormatter
    )
    parser.add_argument('-dist', '--distortion',
                        type=float,
                        default=[0.1],
                        nargs='+',
                        metavar='float',
                        help="distortion factor"
                        )
    parser.add_argument('-step', '--smoothing-steps',
                        type=int,
                        default=[1],
                        nargs='+',
                        metavar='int',
                        help="smoothing steps"
                        )
    parser.add_argument('-damp', '--damping',
                        type=float,
                        default=[1.],
                        nargs='+',
                        metavar='float',
                        help="damping factor"
                        )
    parser.add_argument('-refcyc', '--refinement-cycle-pair',
                        type=cspair,
                        default=[cspair('2,1')],
                        nargs='+',
                        metavar='comma-separated-string',
                        help="number of uniform refinements and run cycles"
                        )
    args = parser.parse_args()
    return args


def main():
    options = parse_args()
    dampings = options.damping
    distortions = options.distortion
    n_smoothing_steps = options.smoothing_steps
    refinement_cycle_pairs = options.refinement_cycle_pair

    for n_refines, n_cycles in refinement_cycle_pairs:
        for n_steps in n_smoothing_steps:
            for dist in distortions:
                for damp in dampings:
                    exec = os.path.join(EXEC_DIR_, 'poisson_distorted')
                    program = [exec, str(dist), str(damp), str(n_steps), str(n_refines), str(n_cycles)]
                    print("program: {}".format(program))
                    subprocess.run(program)
    return 0


if __name__ == '__main__':
    main()
