import argparse
from argparse import RawTextHelpFormatter
import sys
import os
import subprocess

BUILD_DIR_ = os.path.abspath("@CMAKE_BINARY_DIR@") # @...@ replaced by CMake
EXEC_DIR_ = os.path.join(BUILD_DIR_,'TPSS')

def parse_args():
    parser = argparse.ArgumentParser(
        description="""
        test several damping factors regarding the Poisson problem on a distorted Cartesian mesh
        """,
        formatter_class=RawTextHelpFormatter
    )
    parser.add_argument('-stp','--smoothing-steps',
                        type=int,
                        default=[1],
                        nargs='+',
                        metavar='int',
                        help="smoothing steps"
    )
    parser.add_argument('-min','--min-damp',
                        type=float,
                        default=1.,
                        metavar='float',
                        help="minimal damping factor"
    )
    parser.add_argument('-max','--max-damp',
                        type=float,
                        default=1.,
                        metavar='float',
                        help="maximal damping factor"
    )
    parser.add_argument('-stride','--stride-damp',
                        type=float,
                        default=0.05,
                        metavar='float',
                        help="stride through the interval [min-damp,max-damp]"
    )
    parser.add_argument('-geo','--geometry',
                        type=int,
                        default=1,
                        metavar='int',
                        choices=[0,1,2],
                        help="geometry variant (0: cube, 1: distorted cube, 2: ball)"
    )
    parser.add_argument('-lvl','--levels',
                        type=int,
                        default=[2],
                        nargs='+',
                        metavar='int',
                        help="number of MG levels"
    )
    parser.add_argument('-DIM','--dimension',
                        type=int,
                        default=[3],
                        nargs='+',
                        metavar='int',
                        help="dimension of the domain"
    )
    parser.add_argument('-DEG','--fe-degree',
                        type=int,
                        default=[3],
                        nargs='+',
                        metavar='int',
                        help="polynomial degree of finite elements"
    )
    parser.add_argument('-SMO','--smoother',
                        type=str,
                        default=['ACP'],
                        nargs='+',
                        choices=['ACP','AVP','MCP','MVP'],
                        metavar='string',
                        help="variant of the Schwarz smoother"
    )
    args = parser.parse_args()
    return args

def main():
    options = parse_args()
    ##: compile time parameters
    dimensions = options.dimension
    fe_degrees = options.fe_degree
    smoothers = options.smoother
    ##: run time parameters
    damp_min = options.min_damp
    damp_max = options.max_damp
    stride = options.stride_damp
    levels = options.levels
    geometry_id = options.geometry
    steps = options.smoothing_steps
    
    for smo in smoothers:
        for dim in dimensions:
            for deg in fe_degrees:
                ctprm_py = os.path.join(BUILD_DIR_,'ct_parameter.py')
                subprocess.run(['python3',ctprm_py,'-DIM',str(dim),'-DEG',str(deg),'-SMO',smo])
                for step in steps:
                    for level in levels:
                        damp = damp_min
                        while damp<=damp_max:
                            subprocess.run(['make'])
                            exec = os.path.join(EXEC_DIR_,'paper_poisson')
                            # print("{} - {} - {} - {} - {}".format(str(exec),str(step),str(damp),str(geometry_id),str(level)))
                            subprocess.run([exec,str(step),str(damp),str(geometry_id),str(level)])
                            damp = damp + stride;
                            
if __name__ == '__main__':
    main()
